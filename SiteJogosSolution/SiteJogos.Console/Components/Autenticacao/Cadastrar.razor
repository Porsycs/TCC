@inject IJSRuntime JsRuntime;
@inject HttpClient httpClient;
@inject NotificationService notificationService;


<RadzenText TextStyle="TextStyle.DisplayH4" TextAlign="TextAlign.Center" TagName="TagName.H2" Class="rz-mb-6">
    Embarque nessa aventura em apenas alguns passos!
</RadzenText>
<RadzenColumn JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10 rz-mob" Style="background:white;width: 30%; max-width: 90vw; height: auto; overflow: hidden; margin: 0">
    <RadzenColumn Size="12" SizeMD="6" SizeSM="12">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-p-12">
            <RadzenTemplateForm TItem="FormCadastroViewModel" Data=@model Submit=@OnSubmit>
                <RadzenStack Gap="1rem" Class="rz-p-4 rz-p-md-12" Style="padding: 0 !important">
                        <RadzenFormField Text="Nome" Variant="@variant">
                            <ChildContent>
                                <RadzenTextBox @bind-Value="@model.Nome" />
                            </ChildContent>
                        </RadzenFormField>
                    <RadzenFormField Text="E-mail" Variant="@variant">
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@model.Email" />
                        </ChildContent>
                    </RadzenFormField>
                    <RadzenFormField Text="Senha" Variant="@variant">
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@model.Senha" Visible="@(!password)" />
                            <RadzenPassword @bind-Value="@model.Senha" Visible="@password" />
                        </ChildContent>
                        <End>
                            <RadzenButton Icon="@(password ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                        </End>
                    </RadzenFormField>
                    <RadzenFormField Text="Confirmar Senha" Variant="@variant">
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@model.ConfirmaSenha" Visible="@(!confirmPassword)" />
                            <RadzenPassword @bind-Value="@model.ConfirmaSenha" Visible="@confirmPassword" />
                        </ChildContent>
                        <End>
                            <RadzenButton Icon="@(confirmPassword ? "visibility" : "visibility_off")" Click="ToggleConfirmPassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                        </End>
                    </RadzenFormField>
                    <RadzenRow AlignItems="AlignItems.Center" Class="rz-mt-4">
                        <RadzenColumn Size="12" SizeMD="12" Style="text-align:center">
                            <RadzenButton ButtonType="ButtonType.Submit" Class="button-primary" Text="Aceite e Cadastre-se"></RadzenButton>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenText Class="or">ou</RadzenText>
                    <RadzenButton Click="@(args=> retornaLogin())" Class="button-secondary">
                        <RadzenIcon Icon="account_circle" Style="color:black; padding-right:1rem"></RadzenIcon>
                        Acessar
                    </RadzenButton>
                    <RadzenButton class="button-secondary" Click="@(args => LoginGoogle())">
                        <RadzenImage Style="width:5%" src="https://www.svgrepo.com/show/475656/google-color.svg" alt="google logo"></RadzenImage>
                        <span>Login with Google</span>
                    </RadzenButton>
                </RadzenStack>
            </RadzenTemplateForm>
        </RadzenCard>
    </RadzenColumn>
</RadzenColumn>

@code {

    public FormCadastroViewModel model = new FormCadastroViewModel();

    async void OnSubmit(FormCadastroViewModel model)
    {
        await JsRuntime.InvokeVoidAsync("exibeLoadPanel");
        var retorno = await JsRuntime.InvokeAsync<RetornoViewModel>("getDados", "/Autenticacao/CadastraUsuario", model, "POST");
        if (retorno.Sucesso)
        {

            await JsRuntime.InvokeVoidAsync("escondeLoadPanel");
            await JsRuntime.InvokeVoidAsync("notifica", retorno.Titulo, retorno.Mensagem, retorno.Codigo);
            await Task.Delay(1500);
            retornaLogin();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("escondeLoadPanel");
            await JsRuntime.InvokeVoidAsync("notifica", retorno.Titulo, retorno.Mensagem, retorno.Codigo, retorno.Duracao);
        }
    }

    async void retornaLogin()
    {
        await JsRuntime.InvokeVoidAsync("redirecionaTela", "/Login");
    }

    async void LoginGoogle()
    {
        await JsRuntime.InvokeVoidAsync("redirecionaTela", "/GoogleLogin");
    }

    string value = "";
    bool password = true;
    bool confirmPassword = true;
    Variant variant = Variant.Outlined;

    void TogglePassword()
    {
        password = !password;
    }

    void ToggleConfirmPassword()
    {
        confirmPassword = !confirmPassword;
    }
}


<style>
    .button-primary {
        background: var(--rz-primary) !important;
        width: 100% !important;
        color: white !important;
        box-shadow: none !important;
        border: 1px solid black;
        border-radius: 28px !important;
    }

        .button-primary:hover {
            background: #dddddd !important;
            border: 1.5px solid black;
            color:black !important
        }

    .or {
        position: relative;
        width: 300px;
        height: 50px;
        line-height: 50px;
        text-align: center;
    }

        .or::before,
        .or::after {
            position: absolute;
            width: 130px;
            height: 1px;
            top: 24px;
            background-color: #aaa;
            content: '';
        }

        .or::before {
            left: 0;
        }

        .or::after {
            right: 0;
        }

    .button-secondary {
        background: white !important;
        width: 100% !important;
        color: grey !important;
        box-shadow: none !important;
        border: 1px solid black;
        border-radius: 28px !important;
    }

        .button-secondary:hover {
            background: #dddddd !important;
            border: 1.5px solid black;
        }

    @@media only screen and (max-width: 600px) {
        .rz-mob {
            width: 100% !important
        }
    }
</style>