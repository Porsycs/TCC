@inject IJSRuntime JsRuntime;
@inject HttpClient httpClient;
@inject NotificationService notificationService;
@inject DialogService dialogService;

<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 90vw; height: 75vh;overflow: hidden;margin: 0">
    <RadzenColumn Size="12" SizeMD="6" SizeSM="0" class="painel">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-text-align-center rz-p-12" Style="height: 100%; background: no-repeat url('/images/piratalogin5.png'); background-size: cover; background-position: center;">
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6" SizeSM="12">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-p-12">
            <RadzenText TextStyle="TextStyle.DisplayH5" TagName="TagName.H2" Class="rz-mb-6">
                Junte se a nós e nos ajude a criar uma nova história!
            </RadzenText>
            <RadzenText TextStyle="TextStyle.DisplayH6" TagName="TagName.H2" Class="rz-mb-6">
                Informe seus Dados
            </RadzenText>
            <RadzenLogin AllowRegister="true" AllowResetPassword="true" UserText="E-mail" PasswordText="Senha" RememberMeText="Lembrar" AllowRememberMe="true" RegisterMessageText="Novo aqui? Cadastre-se já!" RegisterText="Cadastrar" Register="@(args => Cadastrar())" RememberMe="false" Login=@(args => OnLogin(args)) ResetPassword=@(args => OnResetPassword()) ResetPasswordText="Esqueceu sua senha?" />
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    async void OnLogin(LoginArgs args)
    {
        await JsRuntime.InvokeVoidAsync("exibeLoadPanel");
        var retorno = await JsRuntime.InvokeAsync<RetornoViewModel>("realizaLogin", new AutenticacaoViewModel()
                {
                    Login = args.Username,
                    Senha = args.Password,
                    Lembrar = args.RememberMe,
                });
        if (retorno.Sucesso)
        {
            await JsRuntime.InvokeVoidAsync("escondeLoadPanel");
            await JsRuntime.InvokeVoidAsync("notifica", retorno.Titulo, retorno.Mensagem, retorno.Codigo);
            await JsRuntime.InvokeVoidAsync("redirecionaTela", "/");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("escondeLoadPanel");
            await JsRuntime.InvokeVoidAsync("notifica", retorno.Titulo, retorno.Mensagem, retorno.Codigo);
        }
    }

    async void Cadastrar()
    {
        await JsRuntime.InvokeVoidAsync("redirecionaTela", "/Cadastrar");
    }


    async Task OnResetPassword()
    {
        string valorEmail = "";
        await dialogService.OpenAsync("Recuperar Senha", ds =>
    @<RadzenStack AlignItems="AlignItems.Center">
        <RadzenTextBox @bind-Value="valorEmail" Placeholder="Digite seu email..." />
        <RadzenButton Click="() => EnviarResetSenha(valorEmail)">Enviar</RadzenButton>
        </RadzenStack>
    , new DialogOptions() { ShowTitle = true, Width = "400", ShowClose = true, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = true });
    }

    async Task EnviarResetSenha(string value)
    {
        var email = "";
        var retorno = await JsRuntime.InvokeAsync<RetornoViewModel>("recuperaSenha", new AutenticacaoViewModel()
        {
            Login = value
        });

        if(retorno.Sucesso)
            dialogService.Close();
        await JsRuntime.InvokeVoidAsync("notifica", retorno.Titulo, retorno.Mensagem, retorno.Codigo);
    }
}
