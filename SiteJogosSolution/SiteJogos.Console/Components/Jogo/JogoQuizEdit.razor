@inject IJSRuntime JsRuntime;
@inject DialogService DialogService;

<style>

    .rz-cell-data {
        white-space: normal !important;
    }

    .rz-frozen-cell > .rz-cell-data {
        white-space: nowrap !important;
        text-align: left !important;
    }

</style>

<RadzenTemplateForm Data="@jogo" Submit="@((Jogo args) => { Submit(args); })" Style="margin-top: 1.5rem">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="12">
            <RadzenStack>
                <RadzenFieldset Text="Geral">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenLabel Text="Nome" />
                                <RadzenTextBox Name="Nome" @bind-Value=@jogo.Nome AutoComplete="false" Style="display: block; width: 100%" />
                                <RadzenRequiredValidator Component="Nome" Text="Nome é Obrigatório" Popup=true Style="position: absolute" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenLabel Text="Ordem das Questões" />
                                <RadzenRadioButtonList @bind-Value=@jogo.Aleatorio TValue="bool" class="mb-5">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Em Ordem" Value="false" />
                                        <RadzenRadioButtonListItem Text="Aleatório" Value="true" />
                                    </Items>
                                </RadzenRadioButtonList>
                            </RadzenColumn>
                            @*<RadzenColumn Size="12" SizeMD="6">
                                <RadzenLabel Text="Limite de Tempo (segundos)" />
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="6">
                                        <RadzenRadioButtonList Value="@limiteTempo" TValue="bool" class="mb-5" Change="args => AlteraLimiteTempo(args)">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="Não" Value="false" />
                                                <RadzenRadioButtonListItem Text="Sim" Value="true" />
                                            </Items>
                                        </RadzenRadioButtonList>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="6">
                                        <RadzenNumeric Name="LimiteTempo" TValue="int?" Disabled="!limiteTempo" ShowUpDown="true" @bind-Value=@jogo.LimiteTempo Min="1" AutoComplete="false" Style="display: block; width: 100%" />
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenColumn>*@
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="12">
            <RadzenStack>
                <RadzenFieldset Text="Questões">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenDataGrid @ref="grid" AllowFiltering="false" AllowColumnResize="true" Responsive="true" AllowAlternatingRows="true" AllowSorting="false" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="false" EmptyText="Nenhuma Questão Adicionada"
                                                Data="@quiz" TItem="JogoQuiz" Style="margin-top: 1.5rem; max-height: calc(100vh - 20rem);">
                                    <HeaderTemplate>
                                        <RadzenButton Text="Adicionar Questão" Click=@(() => ExibePopupInsereQuiz()) />
                                    </HeaderTemplate>
                                    <Columns>
                                        <RadzenDataGridColumn TItem="JogoQuiz" Context="Id" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="false" Width="150px" Resizable="false">
                                            <Template Context="Id">
                                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Click="(args => DeletaQuiz(Id))" title="Remover" />
                                                <RadzenButton Visible="@(quiz.IndexOf(Id) != 0)" ButtonStyle="ButtonStyle.Light" Icon="arrow_upward" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Click="(args => MoveAcima(Id))" title="Mover para Cima" />
                                                <RadzenButton Visible="@(quiz.IndexOf(Id) + 1 != quiz.Count)" ButtonStyle="ButtonStyle.Light" Icon="arrow_downward" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Click="(args => MoveAbaixo(Id))" title="Mover para Baixo" />
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="JogoQuiz" Property="Ordem" Title="Ordem" />
                                        <RadzenDataGridColumn TItem="JogoQuiz" Property="Pergunta" Title="Pergunta" />
                                        <RadzenDataGridColumn TItem="JogoQuiz" Property="Resposta1" Title="Resposta A" />
                                        <RadzenDataGridColumn TItem="JogoQuiz" Property="Resposta2" Title="Resposta B" />
                                        <RadzenDataGridColumn TItem="JogoQuiz" Property="Resposta3" Title="Resposta C" />
                                        <RadzenDataGridColumn TItem="JogoQuiz" Property="Resposta4" Title="Resposta D" />
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        <RadzenButton BusyText="Salvando" ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Salvar" />
    </RadzenStack>
</RadzenTemplateForm>

@code {

    [Parameter]
    public Jogo jogo { get; set; } = new Jogo();

    [Parameter]
    public List<JogoQuiz> quiz { get; set; } = new List<JogoQuiz>();

    [Parameter]
    public bool limiteTempo { get; set; }

    public RadzenDataGrid<JogoQuiz> grid;

    public void Atualiza()
    {
        StateHasChanged();
    }

    void AlteraLimiteTempo(bool args)
    {
        limiteTempo = args;
        jogo.LimiteTempo = limiteTempo ? jogo.LimiteTempo ?? 0 : null;
    }

    async void ExibePopupInsereQuiz()
    {
        await DialogService.OpenAsync<PopupJogoQuiz>("Adicionar Quiz", new Dictionary<string, object>() { { "jogoQuiz", this } }, new DialogOptions() { Width = "1000px", Height = "auto", Resizable = false, Draggable = false });
    }

    public void ReodernaQuiz()
    {
        var ordem = 1;
        foreach(var q in quiz)
        {
            q.Ordem = ordem;
            ordem++;
        }
    }

    public void MoveAcima(JogoQuiz quizAtual)
    {
        var ordem = quiz.IndexOf(quizAtual);
        var quizAcima = quiz[ordem - 1];
        quiz[ordem] = quizAcima;
        quiz[ordem - 1] = quizAtual;
        ReodernaQuiz();
        grid.Reload();
    }

    public void MoveAbaixo(JogoQuiz quizAtual)
    {
        var ordem = quiz.IndexOf(quizAtual);
        var quizAcima = quiz[ordem + 1];
        quiz[ordem] = quizAcima;
        quiz[ordem + 1] = quizAtual;
        ReodernaQuiz();
        grid.Reload();
    }

    void DeletaQuiz(JogoQuiz item)
    {
        quiz.Remove(item);
        ReodernaQuiz();
        grid.Reload();
    }

    async Task Submit(Jogo j)
    {
        if (string.IsNullOrEmpty(jogo?.Nome?.Trim()))
        {
            await JsRuntime.InvokeVoidAsync("notifica", "Erro", "Insira um nome para seu jogo", "error");
            return;
        }

        if (!quiz.Any())
        {
            await JsRuntime.InvokeVoidAsync("notifica", "Erro", "Insira pelo menos 1 questão para continuar", "error");
            return;
        }

        var dados = new
        {
            jogo = Newtonsoft.Json.JsonConvert.SerializeObject(jogo),
            quiz = Newtonsoft.Json.JsonConvert.SerializeObject(quiz)
        };

        var retorno = await JsRuntime.InvokeAsync<RetornoViewModel>("getDados", "/Jogo/InsereJogoQuiz", dados, "POST");
        await JsRuntime.InvokeVoidAsync("notifica", retorno.Sucesso ? "Sucesso" : "Erro", retorno.Mensagem, retorno.Sucesso ? "success" : "error");

        if (retorno.Sucesso)
        {
            await JsRuntime.InvokeVoidAsync("redirecionaTela", "/MeusJogos");
        }
    }
}