@inject IJSRuntime JS;
@inject DialogService DialogService;

<style>
    .icone {
        height: 12rem !important;
        width: 12rem !important;
    }

    .rz-fileupload-buttonbar {
        background-color: transparent;
    }

    .rz-fileupload-content {
        display: none !important;
    }

    .rz-fileupload-choose {
        background-color: var(--rz-warning) !important;
        color: var(--rz-on-warning) !important;
        width: 2rem !important;
        height: 2rem !important;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 20px;
    }
</style>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
    <RadzenLabel><h4>Meu Perfil</h4></RadzenLabel>
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/" Text="Home" Icon="home" />
        <RadzenBreadCrumbItem Text="Perfil" Icon="account_circle" />
    </RadzenBreadCrumb>
</RadzenStack>

<div style="display: flex; justify-content: center; width: 100%">
    <RadzenTemplateForm TItem="Usuario" Data="@usuario" Submit=@OnSubmit Style="margin-top: 1.5rem; border-radius: 25px; width: 100%; max-width: 35rem; background-color: white; color: var(--rz-header-color)" class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10">
        <RadzenFieldset Style="border: none; border-radius: 0px">
            <RadzenStack Gap="1rem" Class="rz-p-4 rz-p-md-12" Style="padding: 0 !important">
                <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" RowGap="0.25rem">
                    <RadzenColumn Size="12" SizeMD="12" Style="width: 100%; text-align: center;">
                        <div style="width: 100%">
                            <RadzenUpload Url="upload/single" Accept="image/*" Icon="photo_camera" ChooseText="" Complete=@CompleteUpload Style="border-radius: 20px; position: relative; left: 4rem; top: 3rem;"></RadzenUpload>
                        </div>
                        <RadzenImage Path="@path" class="rz-gravatar icone" Visible="@mostraFoto" /> 
                        <RadzenGravatar Email="@(usuario.Email)" class="icone" Visible="@mostraAvatar" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenFormField Text="Nome">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@usuario.Nome" />
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="E-mail">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@usuario.Email" />
                    </ChildContent>
                </RadzenFormField>
                <RadzenRow AlignItems="AlignItems.Center" Class="rz-mt-4">
                    <RadzenColumn Size="12" SizeMD="12" Style="text-align:center">
                        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="Salvar" class="button-primary"></RadzenButton>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>
    </RadzenTemplateForm>
</div>

@code {

    [Parameter]
    public Usuario usuario { get; set; }

    public bool mostraFoto { get; set; } = false;
    public bool mostraAvatar { get; set; } = true;

    public string? path { get; set; } = null;
    public string? fileName { get; set; } = null;
    public string? base64 { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (usuario.MidiaId.HasValue)
        {
            mostraAvatar = false;
            mostraFoto = true;
            path = $"/Midia/GetMidia?Id={usuario.MidiaId}";
        }
    }

    public void CompleteUpload(UploadCompleteEventArgs args)
    {
        var result = Newtonsoft.Json.Linq.JObject.Parse(args.JsonResponse.RootElement.ToString());
        fileName = result.GetValue("fileName")?.ToString();
        base64 = result.GetValue("base64")?.ToString();
        path = $"data:{result.GetValue("contentType")};base64,{result.GetValue("base64")}";
        mostraAvatar = false;
        mostraFoto = true;
    }

    async void OnSubmit(Usuario usuario)
    {
        var popupConfirma = await DialogService.Confirm($"Deseja salvar suas informações de Perfil?", "Salvar", new ConfirmOptions() { OkButtonText = "Sim", CancelButtonText = "Não" });
        if (popupConfirma == true)
        {
            var dados = new
            {
                nome = usuario.Nome,
                email = usuario.Email,
                fileName,
                base64
            };
            await JS.InvokeVoidAsync("exibeLoadPanel");
            var retorno = await JS.InvokeAsync<RetornoViewModel>("salvarPefil", usuario.Nome, usuario.Email, fileName, base64);
            await JS.InvokeVoidAsync("escondeLoadPanel");
            await JS.InvokeVoidAsync("notifica", retorno.Titulo, retorno.Mensagem, retorno.Codigo);
            await JS.InvokeVoidAsync("recarregaTela");
        }
    }
}


<style>
    .button-primary {
        background: var(--rz-primary) !important;
        width: 50% !important;
        color: white !important;
        box-shadow: none !important;
        border: 1px solid black;
        border-radius: 28px !important;
    }

        .button-primary:hover {
            background: #dddddd !important;
            border: 1.5px solid black;
            color:black !important
        }
</style>