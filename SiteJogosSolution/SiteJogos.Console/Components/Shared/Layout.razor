@inject IJSRuntime Js;
@inject DialogService DialogService;

<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

<style>

    @@media(max-width: 1024px) {
        .nome-usuario {
            display: none;
        }
    }

</style>

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="0" Style="height: 100%; background: white">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="margin-left:2rem">
                <RadzenButton Click='() => redirecionaTela("/")' Style="background:white; box-shadow:none">
                    <RadzenIcon Icon="menu_book" Style="color:black; padding-right:1rem" />
                    <RadzenLabel Text="Historiando" Style="font-weight:600; color:black; font-family: math" />
                </RadzenButton>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="padding-right:1rem">
                @if (usuario == null)
                {
                    <RadzenButton Text="Acessar" Variant="Variant.Text" Style="color:black" ButtonStyle="ButtonStyle.Primary" Click='() => redirecionaTela("/Login")' />
                }
                else
                {
                    <RadzenButton Text="Meus Jogos" ButtonStyle="ButtonStyle.Primary" Style="color:black; background:white; box-shadow:none" Click='() => redirecionaTela("/MeusJogos")' />
                    <RadzenProfileMenu Style="background:white">
                        <Template>
                            <RadzenLabel Text="@(usuario.UserName)" class="nome-usuario" Style="margin-right: 0.5rem; color:black" />
                            @if (usuario.MidiaId.HasValue)
                            {
                                <RadzenImage Path="@($"/Midia/GetMidia?Id={usuario.MidiaId}")" class="rz-gravatar" />
                            }
                            else
                            {
                                <RadzenGravatar Email="@(usuario.Email)" />
                            }
                        </Template>
                        <ChildContent>
                            <div onclick='redirecionaTela("/Perfil")'>
                                <RadzenProfileMenuItem Text="Meu Perfil" Style="color:black" Icon="account_circle"></RadzenProfileMenuItem>
                            </div>
                            <div @onclick="exibePopupTrocaSenha">
                                <RadzenProfileMenuItem Text="Trocar Senha" Style="color:black" Icon="lock_reset"></RadzenProfileMenuItem>
                            </div>
                            @*<div @onclick="temaClaro">
                        <RadzenProfileMenuItem Visible="!LightMode" Text="Modo Claro" Icon="light_mode"></RadzenProfileMenuItem>
                        </div>
                        <div @onclick="temaEscuro">
                        <RadzenProfileMenuItem Visible="LightMode" Text="Modo Escuro" Icon="dark_mode" @onclick="temaEscuro"></RadzenProfileMenuItem>
                        </div>*@
                            <div onclick="sairSistema()">
                                <RadzenProfileMenuItem Text="Sair" Icon="logout"></RadzenProfileMenuItem>
                            </div>
                        </ChildContent>
                    </RadzenProfileMenu>
                }
            </RadzenStack>
        </RadzenStack>
    </RadzenHeader>
    <RadzenBody>
        <div id="corpo-principal" class="rz-p-4">
        </div>
    </RadzenBody>
</RadzenLayout>

@code {

    [Parameter]
    public Usuario? usuario { get; set; } = null;

    [Parameter]
    public bool LightMode { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Js.InvokeVoidAsync("insereBody");
        await base.OnAfterRenderAsync(firstRender);
    }

    async void temaClaro()
    {
        LightMode = true;
        await Js.InvokeVoidAsync("temaClaro");
    }

    async void temaEscuro()
    {
        LightMode = false;
        await Js.InvokeVoidAsync("temaEscuro");
    }

    async void exibePopupTrocaSenha()
    {
        await DialogService.OpenAsync<SiteJogos.Console.Components.Autenticacao.TrocaSenha>("Trocar Senha", null, new DialogOptions() { Width = "400px", Height = "auto", Resizable = false, Draggable = false });
    }

    async void redirecionaTela(string url)
    {
        await Js.InvokeVoidAsync("redirecionaTela", url);
    }

    async void sairSistema()
    {
        await Js.InvokeVoidAsync("sairSistema");
    }
}
